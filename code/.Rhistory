#'   \tilde{\mathbf{Y}}' = \tilde{\mathbf{Y}} \times \mathbf{V}
#' \]
#' for $\tilde{\mathbf{Y}}$ the matrix of CLR transformed data and a given matrix
#' $\mathbf{V}$ with $p$ rows and $p-1$ columns such that $\mathbf{V}
#' \mathbf{V}^\top = \mathbb{I}_{p-1}$ and $\mathbf{V}^\top \mathbf{V} =
#' \mathbb{I} + a \mathbf{1}$, $a$ being any positive number and $\mathbf{1}$ a
#' vector full of 1.
#'
## ----IRLdist-------------------------------------------------------------
abundances_ILR <- logratio.transfo(abundances_TSS, logratio = "ILR",
offset = 1)
class(abundances_ILR) <- "matrix"
df <- data.frame(t(abundances_ILR))  # on transpose pour avoir une matrice 406*45 comme les autres
names(df) <- paste0("sample", 1:ncol(df))
ggplot(df, aes(x = sample1)) + geom_histogram(bins = 50) + theme_bw() +
xlab("counts (sample 1)")
#'
#'
#' * CSS transformation, which is an adaptative extension for metagenomic data of
#' the quantile normalization used in microarray expression datasets. It is
#' designed so as to account for technical differences between samples.
## ----CSSdist-------------------------------------------------------------
abundances_CSS <- newMRexperiment(abundances)
abundances_CSS <- cumNorm(abundances_CSS)
df <- data.frame(MRcounts(abundances_CSS))
names(df) <- paste0("sample", 1:ncol(df))
ggplot(df, aes(x = sample1 + 1)) + geom_histogram(bins = 50) + theme_bw() +
xlab("counts (sample 1)") + scale_y_log10() + scale_x_log10()
#'
#' The less asymetric distribution seems to be the one obtained with the CLR
#' transformation and the log-transformed CSS.
#'
#'
#' ## Exploratory analysis: distribution of all samples
#'
#' Distributions of all samples according to the type of transformation and the
#' sample is provided below:
#'
## ----allBoxplots---------------------------------------------------------
df_log <- log10(abundances + 1)
names(df_log) <- paste0("Sample", 1:ncol(df_log))
df_log <- melt(df_log)
df_CLR <- data.frame(t(abundances_CLR))
names(df_CLR) <- paste0("Sample", 1:ncol(df_CLR))
df_CLR <- melt(df_CLR)
df_ILR <- data.frame(t(abundances_ILR))
names(df_ILR) <- paste0("Sample", 1:ncol(df_ILR))
df_ILR <- melt(df_ILR)
df_CSS <- data.frame(log(MRcounts(abundances_CSS)) + 1)
names(df_CSS) <- paste0("Sample", 1:ncol(df_CSS))
df_CSS <- melt(df_CSS)
all_sizes <- c(nrow(df_log), nrow(df_CLR), nrow(df_ILR), nrow(df_CSS))
df <- data.frame(rbind(df_log, df_CLR, df_ILR, df_CSS),
"type" = rep(c("log", "CLR", "ILR", "log-CSS"), all_sizes))
#on transforme notre matrice abundances en vecteur, en gros pour le veau 1 - premier valeur, veau 1 - 2ème valeur et ainsi de suite
ggplot(df, aes(x = variable, y = value)) + geom_boxplot() + theme_bw() +
facet_wrap(~ type, scales = "free_y") + xlab("samples") +
theme(axis.text.x = element_blank())
list_doublons<-unique(names(which(table(df_abundances[ ,1]) > 1)))
fusion_doublons<-as.data.frame(t(sapply(list_doublons,FUN=function(x){as.data.frame(t(colSums(abundances[grep(x,df_abundances[,1]),])))})))
list_pas_doublons <- unique(names(which(table(df_abundances[ ,1]) == 1)))
data <- rbind(abundances[match(list_pas_doublons,df_abundances[,1]),],fusion_doublons)
rownames(data)<-c(list_pas_doublons,list_doublons)
colnames(data) <- id_abundances
data <- data[,-grep("29",id_abundances)]
dim(data)
colnames(data) <- paste0("sample",colnames(data))
df_pathogenes<-read.delim("../data/pathogenes.csv",sep = ",")
list.files()
df_pathogenes<-read.delim("../data/pathogenes.csv",sep = ",")
noms_veaux<-df_pathogenes[,1]
pathogenes<-df_pathogenes[,-c(1,9)]
pathogenes<-ifelse(pathogenes=='p',1,0)
pathogenes<-as.data.frame(apply(pathogenes,1,as.factor))
match(id_abundances,sapply(as.character(noms_veaux),FUN=function(x){substr(x,5,nchar(x))})) # matcher les noms des veaux
sapply(as.character(noms_veaux),FUN=function(x){substr(x,5,nchar(x))})
match(id_abundances,sapply(as.character(noms_veaux),FUN=function(x){substr(x,6,nchar(x))})) # matcher les noms des veaux
class(id_abundances)
id_abundances
sapply(as.character(noms_veaux),FUN=function(x){substr(x,6,nchar(x))})
id_pathogenes<-df_pathogenes[,1]
match(id_abundances,sapply(as.character(id_pathogenes),FUN=function(x){substr(x,6,8)})) # matcher les noms des veaux
sapply(as.character(id_pathogenes),FUN=function(x){substr(x,6,8)})
id_pathogenes
id_pathogenes<-ifelse(nchar(pathogenes)==1,gsub(pathogenes,"","0"),pathogenes)
id_pathogenes
id_pathogenes<-df_pathogenes[,1]
id_pathogenes<-ifelse(nchar(id_pathogenes)==1,gsub(id_pathogenes,"","0"),id_pathogenes)
id_pathogenes<-df_pathogenes[,1]
id_pathogenes <- gsub(id_pathogenes,"-","0")
id_pathogenes<-df_pathogenes[,1]
id_pathogenes<-ifelse(nchar(id_pathogenes)==1,gsub("","0",id_pathogenes),id_pathogenes)
id_pathogenes <- gsub("-","0",id_pathogenes)
id_pathogenes
id_pathogenes <- sapply(as.character(id_pathogenes),FUN=function(x){substr(x,nchar(x)-2,nchar(x))})
id_pathogenes
id_pathogenes<-df_pathogenes[,1]
id_pathogenes <- gsub("-","0",id_pathogenes)
id_pathogenes <- sapply(as.character(id_pathogenes),FUN=function(x){substr(x,nchar(x)-3,nchar(x))})
id_pathogenes
id_pathogenes<-df_pathogenes[,1]
id_pathogenes <- gsub("-","0",id_pathogenes)
id_pathogenes <- sapply(as.character(id_pathogenes),FUN=function(x){substr(x,nchar(x)-1,nchar(x))})
id_pathogenes
id_pathogenes<-df_pathogenes[,1]
id_pathogenes <- gsub("-","0",id_pathogenes)
id_pathogenes <- gsub(" ","",id_pathogenes)
id_pathogenes <- sapply(as.character(id_pathogenes),FUN=function(x){substr(x,nchar(x)-1,nchar(x))})
id_pathogenes
match(id_abundances,id_pathogenes) # matcher les noms des veaux
id_pathogenes[match(id_abundances,id_pathogenes)]
pathogenes<-pathogenes[match(id_abundances,id_pathogenes),] # matcher les noms des veaux
View(pathogenes)
df_pathogenes<-read.delim("../data/pathogenes.csv",sep = ",")
pathogenes<-df_pathogenes[,-c(1,9)]
pathogenes<-ifelse(pathogenes=='p',1,0)
pathogenes<-as.data.frame(apply(pathogenes,1,as.factor))
id_pathogenes<-df_pathogenes[,1]
id_pathogenes <- gsub("-","0",id_pathogenes)
id_pathogenes <- gsub(" ","",id_pathogenes)
id_pathogenes <- sapply(as.character(id_pathogenes),FUN=function(x){substr(x,nchar(x)-1,nchar(x))})
pathogenes<-pathogenes[match(id_abundances,id_pathogenes),] # matcher les noms des veaux
df_pathogenes<-read.delim("../data/pathogenes.csv",sep = ",")
pathogenes<-df_pathogenes[,-c(1,9)]
View(pathogenes)
match(id_abundances,id_pathogenes)
length(match(id_abundances,id_pathogenes))
pathogenes<-pathogenes[match(id_abundances[-id_abundances=="29"],id_pathogenes),] # matcher les noms des veaux
pathogenes<-pathogenes[match(id_abundances[-(id_abundances=="29")],id_pathogenes),] # matcher les noms des veaux
length(match(id_abundances,id_pathogenes))
length(match(id_abundances[-(id_abundances=="29")],id_pathogenes))
test<-pathogenes[match(id_abundances[-(id_abundances=="29")],id_pathogenes),] # matcher les noms des veaux
View(test)
sort?
!
)
?sort
sort(id_abundances)
match(id_abundances[-(id_abundances=="29")],id_pathogenes)
match(id_abundances[-(id_abundances=="29")],id_pathogenes)[1:22]
match(id_abundances[-(id_abundances=="29")],id_pathogenes)[1:21]
match(id_abundances[-(id_abundances=="29")],id_pathogenes)[22:44]
id_pathogenes <- id_pathogenes[-id_pathohenes=="29"]
id_pathogenes <- id_pathogenes[-id_pathogenes=="29"]
id_pathogenes <- id_pathogenes[-(id_pathogenes=="29")]
match(id_abundances[-(id_abundances=="29")],id_pathogenes)
match(id_abundances[-(id_abundances=="29")],id_pathogenes)[1:22]
match(id_abundances[-(id_abundances=="29")],id_pathogenes)[23:44]
length(match(id_abundances[-(id_abundances=="29")],id_pathogenes)[23:44])
length(match(id_abundances[-(id_abundances=="29")],id_pathogenes))
id_abundances[-(id_abundances=="29")]
id_pathogenes
table(id_pathogenes)
table(df_pathogenes[,1])
id_pathogenes<-df_pathogenes[,1]
id_pathogenes <- gsub("-","0",id_pathogenes)
table(id_pathogenes)
id_pathogenes <- gsub(" ","",id_pathogenes)
table(id_pathogenes)
id_pathogenes <- sapply(as.character(id_pathogenes),FUN=function(x){substr(x,nchar(x)-1,nchar(x))})
table(id_pathogenes)
id_pathogenes <- id_pathogenes[-(id_pathogenes=="29")]
table(id_pathogenes)
id_pathogenes<-df_pathogenes[,1]
id_pathogenes <- gsub("-","0",id_pathogenes)
id_pathogenes <- gsub(" ","",id_pathogenes)
id_pathogenes <- sapply(as.character(id_pathogenes),FUN=function(x){substr(x,nchar(x)-1,nchar(x))})
id_pathogenes <- id_pathogenes[-grep("29",id_pathogenes]
#
test_1<-pathogenes[match(id_abundances[-grep("29",id_abundances)],id_pathogenes),] # matcher les noms des veaux
# creation echantillon test et apprentissage
set.seed(111) # initialisation du générateur
# Extraction des échantillons
test.ratio=.2   # part de l'échantillon test
npop=ncol(data) # nombre de lignes dans les données
nvar=nrow(data) # nombre de colonnes
# taille de l'échantillon test
ntest=ceiling(npop*test.ratio)
# indices de l'échantillon test
testi=sample(1:npop,ntest)
# indices de l'échantillon d'apprentissage
appri=setdiff(1:npop,testi)
# construction de l'échantillon d'apprentissage
datappr=data[,appri]
# construction de l'échantillon test
datestr=data[,testi]
#
library(randomForest)
rf.reg=randomForest(pathogenes[1,]~., data=datappr,xtest=datestr,ytest=pathogenes[1,],
ntree=500,do.trace=50,importance=TRUE)
#'
#'
#'
#' # Session information
#'
## ----sessionInfo---------------------------------------------------------
sessionInfo()
id_pathogenes<-df_pathogenes[,1]
id_pathogenes <- gsub("-","0",id_pathogenes)
id_pathogenes <- gsub(" ","",id_pathogenes)
id_pathogenes <- sapply(as.character(id_pathogenes),FUN=function(x){substr(x,nchar(x)-1,nchar(x))})
id_pathogenes <- id_pathogenes[-grep("29",id_pathogenes)]
id_pathogenes
table(id_pathogenes)
test_1<-pathogenes[match(id_abundances[-grep("29",id_abundances)],id_pathogenes),] # matcher les noms des veaux
length(match(id_abundances[-grep("29",id_abundances)],id_pathogenes))
match(id_abundances[-grep("29",id_abundances)],id_pathogenes)[1:22]
match(id_abundances[-grep("29",id_abundances)],id_pathogenes)[22:44]
match(id_abundances[-grep("29",id_abundances)],id_pathogenes)
match(id_abundances[-grep("29",id_abundances)],id_pathogenes)[23:44]
match(id_abundances[-grep("29",id_abundances)],id_pathogenes)[1:22]
test_1<-pathogenes[match(id_abundances[-grep("29",id_abundances)],id_pathogenes)[1:22],]
View(test_1)
View(pathogenes)
id_abundances
class(id_abundances)
mode(id_abundances)
type(id_abundances)
colnames(id_abundances)
names(id_abundances)
View(pathogenes)
View(df_pathogenes)
condition
length(condition)
id_pathogenes <- past0(id_pathogenes,rev(condition[-grep("29",id_abundances)]))
id_pathogenes <- paste0(id_pathogenes,rev(condition[-grep("29",id_abundances)]))
id_pathogenes
id_pathogenes<-df_pathogenes[,1]
id_pathogenes <- gsub("-","0",id_pathogenes)
id_pathogenes <- gsub(" ","",id_pathogenes)
id_pathogenes <- sapply(as.character(id_pathogenes),FUN=function(x){substr(x,nchar(x)-1,nchar(x))})
id_pathogenes <- id_pathogenes[-grep("29",id_pathogenes)]
id_pathogenes <- paste0(id_pathogenes,"_",rev(condition[-grep("29",id_abundances)]))
id_pathogenes
id_abundances_bis <- paste0(id_abundances[-grep("29",id_abundances)],"_",condition[-grep("29",id_abundances)])
id_abundances_bis
match(id_abundances_bis,id_pathogenes)
id_pathogenes[match(id_abundances_bis,id_pathogenes)]
id_abundances_bis
test_1<-pathogenes[match(id_abundances_bis,id_pathogenes),]
View(test_1)
df_pathogenes<-read.delim("../data/pathogenes.csv",sep = ",")
pathogenes<-df_pathogenes[,-c(1,9)]
pathogenes<-ifelse(pathogenes=='p',1,0)
pathogenes<-as.data.frame(apply(pathogenes,1,as.factor))
id_pathogenes<-df_pathogenes[,1]
id_pathogenes <- gsub("-","0",id_pathogenes)
id_pathogenes <- gsub(" ","",id_pathogenes)
id_pathogenes <- sapply(as.character(id_pathogenes),FUN=function(x){substr(x,nchar(x)-1,nchar(x))})
id_pathogenes <- id_pathogenes[-grep("29",id_pathogenes)]
id_pathogenes <- paste0(id_pathogenes,"_",rev(condition[-grep("29",id_abundances)]))
#
# matcher les noms des veaux
id_abundances_bis <- paste0(id_abundances[-grep("29",id_abundances)],"_",condition[-grep("29",id_abundances)])
pathogenes<-pathogenes[match(id_abundances_bis,id_pathogenes),]
set.seed(111) # initialisation du générateur
test.ratio=.2   # part de l'échantillon test
npop=ncol(data) # nombre de lignes dans les données
nvar=nrow(data) # nombre de colonnes
ntest=ceiling(npop*test.ratio)
testi=sample(1:npop,ntest)
appri=setdiff(1:npop,testi)
datappr=data[,appri]
datestr=data[,testi]
pathogenes[1,]
df_pathogenes<-read.delim("../data/pathogenes.csv",sep = ",")
pathogenes<-df_pathogenes[,-c(1,9)]
pathogenes<-ifelse(pathogenes=='p',1,0)
pathogenes<-as.data.frame(apply(pathogenes,1,as.factor))
id_pathogenes<-df_pathogenes[,1]
id_pathogenes <- gsub("-","0",id_pathogenes)
id_pathogenes <- gsub(" ","",id_pathogenes)
id_pathogenes <- sapply(as.character(id_pathogenes),FUN=function(x){substr(x,nchar(x)-1,nchar(x))})
id_pathogenes <- id_pathogenes[-grep("29",id_pathogenes)]
id_pathogenes <- paste0(id_pathogenes,"_",rev(condition[-grep("29",id_abundances)]))
#
# matcher les noms des veaux
id_abundances_bis <- paste0(id_abundances[-grep("29",id_abundances)],"_",condition[-grep("29",id_abundances)])
Y<-pathogenes[match(id_abundances_bis,id_pathogenes),]
View(Y)
match(id_abundances_bis,id_pathogenes)
df_pathogenes<-read.delim("../data/pathogenes.csv",sep = ",")
pathogenes<-df_pathogenes[,-c(1,9)]
pathogenes<-ifelse(pathogenes=='p',1,0)
pathogenes<-as.data.frame(apply(pathogenes,1,as.factor))
id_pathogenes<-df_pathogenes[,1]
id_pathogenes <- gsub("-","0",id_pathogenes)
id_pathogenes <- gsub(" ","",id_pathogenes)
id_pathogenes <- sapply(as.character(id_pathogenes),FUN=function(x){substr(x,nchar(x)-1,nchar(x))})
id_pathogenes <- id_pathogenes[-grep("29",id_pathogenes)]
id_pathogenes <- paste0(id_pathogenes,"_",rev(condition[-grep("29",id_abundances)]))
#
# matcher les noms des veaux
id_abundances_bis <- paste0(id_abundances[-grep("29",id_abundances)],"_",condition[-grep("29",id_abundances)])
Y<-pathogenes[match(id_abundances_bis,id_pathogenes),]
View(pathogenes)
Y<-pathogenes[,match(id_abundances_bis,id_pathogenes)]
View(Y)
colnames(Y)<-id_abundances_bis
View(Y)
fit <- randomForest(pathogenes[,1] ~ ., data = data)
library(randomForest)
install.packages("randomForest")
fit <- randomForest(pathogenes[,1] ~ ., data = data)
library(randomForest)
fit <- randomForest(pathogenes[,1] ~ ., data = data)
fit <- randomForest(list(pathogenes[,1]) ~ ., data = data)
fit <- randomForest(Y[1,] ~ ., data = data)
fit <- randomForest(list(Y[1,]) ~ ., data = data)
class(Y)
list(Y)
Class(Y)
class(Y)
class(Y[1,])
class(list(Y[1,]))
list(Y[1,])
fit <- randomForest(t(Y[1,]) ~ ., data = data)
View(data)
fit <- randomForest(t(Y[1,]) ~ ., data = t(data))
fit <- randomForest(Y[1,] ~ ., data = t(data))
)
fit <- randomForest(t(Y[1,]) ~ ., data = t(data))
fit <- randomForest(t(Y[1,]) ~ ., data = as.data.frame(t(data)))
class(as.data.frame(t(data)))
View(as.data.frame(t(data)))
as.data.frame(t(data))[1,1]
class(as.data.frame(t(data))[1,1])
class(data)[1,1])
class(data[1,1])
data[1,1]
View(data)
class(t(Y[1,]))
t(Y[1,])
t(Y[1,])[1]
class(t(Y[1,])[1])
class(Y[1,1])
fit <- randomForest(as.data.frame(apply(t(Y[1,]),1,as.factor)) ~ ., data = as.data.frame(t(data)))
as.data.frame(apply(t(Y[1,]),1,as.factor))
test <- as.data.frame(apply(t(Y[1,]),1,as.factor))
class(test)
class(test[1])
test <- as.data.frame(sapply(t(Y[1,]),as.factor))
class(test[1])
fit <- randomForest(as.data.frame(sapply(t(Y[1,]),as.factor)) ~ ., data = as.data.frame(t(data)))
fit <- randomForest(sapply(t(Y[1,]),as.factor) ~ ., data = as.data.frame(t(data)))
fit <- randomForest(as.factor(t(Y[1,])) ~ ., data = as.data.frame(t(data)))
fit <- randomForest(Y[1,] ~ ., data = as.data.frame(t(data)))
class(Y[1,])
as.factor(Y[1,])
sapply(Y[1,],as.factor)
class(Y[1,])
df_pathogenes<-read.delim("../data/pathogenes.csv",sep = ",")
pathogenes<-df_pathogenes[,-c(1,9)]
pathogenes<-ifelse(pathogenes=='p',1,0)
pathogenes<-as.data.frame(apply(pathogenes,1,as.factor))
id_pathogenes<-df_pathogenes[,1]
id_pathogenes <- gsub("-","0",id_pathogenes)
id_pathogenes <- gsub(" ","",id_pathogenes)
id_pathogenes <- sapply(as.character(id_pathogenes),FUN=function(x){substr(x,nchar(x)-1,nchar(x))})
id_pathogenes <- id_pathogenes[-grep("29",id_pathogenes)]
id_pathogenes <- paste0(id_pathogenes,"_",rev(condition[-grep("29",id_abundances)]))
#
# matcher les noms des veaux
id_abundances_bis <- paste0(id_abundances[-grep("29",id_abundances)],"_",condition[-grep("29",id_abundances)])
Y<-pathogenes[,match(id_abundances_bis,id_pathogenes)]
colnames(Y)<-id_abundances_bis
View(Y)
View(data)
fit <- randomForest(Y[1,] ~ ., data = as.data.frame(t(data)))
fit <- randomForest(factor(Y[1,]) ~ ., data = as.data.frame(t(data)))
rownames(data)<-c(list_pas_doublons,list_doublons)
colnames(data) <- id_abundances
data <- data[,-grep("29",id_abundances)]
dim(data)
colnames(data) <- paste0("sample",colnames(data))
df_pathogenes<-read.delim("../data/pathogenes.csv",sep = ",")
pathogenes<-df_pathogenes[,-c(1,9)]
pathogenes<-ifelse(pathogenes=='p',1,0)
df_pathogenes<-read.delim("../data/pathogenes.csv",sep = ",")
pathogenes<-df_pathogenes[,-c(1,9)]
pathogenes<-as.data.frame(ifelse(pathogenes=='p',1,0))
pathogenes<-as.data.frame(apply(pathogenes,1,as.factor))
df_pathogenes<-read.delim("../data/pathogenes.csv",sep = ",")
pathogenes<-df_pathogenes[,-c(1,9)]
pathogenes<-as.data.frame(ifelse(pathogenes=='p',1,0))
pathogenes<-as.data.frame(apply(t(pathogenes),1,as.factor))
df_pathogenes<-read.delim("../data/pathogenes.csv",sep = ",")
pathogenes<-df_pathogenes[,-c(1,9)]
pathogenes<-as.data.frame(ifelse(pathogenes=='p',1,0))
pathogenes<-as.data.frame(apply(t(pathogenes),1,as.factor))
id_pathogenes<-df_pathogenes[,1]
id_pathogenes <- gsub("-","0",id_pathogenes)
id_pathogenes <- gsub(" ","",id_pathogenes)
id_pathogenes <- sapply(as.character(id_pathogenes),FUN=function(x){substr(x,nchar(x)-1,nchar(x))})
id_pathogenes <- id_pathogenes[-grep("29",id_pathogenes)]
id_pathogenes <- paste0(id_pathogenes,"_",rev(condition[-grep("29",id_abundances)]))
#
# matcher les noms des veaux
id_abundances_bis <- paste0(id_abundances[-grep("29",id_abundances)],"_",condition[-grep("29",id_abundances)])
Y<-pathogenes[match(id_abundances_bis,id_pathogenes),]
View(Y)
rownames(Y)<-id_abundances_bis
View(Y)
View(Y)
fit <- randomForest(Y$Ct.RSV ~ ., data = as.data.frame(t(data)))
fit <- randomForest(Y$Ct.RSV ~ ., data = as.matrix(t(data)))
fit <- randomForest(Y$Ct.RSV ~ ., data = t(data))
fit <- randomForest(Y$Ct.RSV ~ ., data = data)
View(data)
list_doublons<-unique(names(which(table(df_abundances[ ,1]) > 1)))
fusion_doublons<-as.data.frame(t(sapply(list_doublons,FUN=function(x){as.data.frame(t(colSums(abundances[grep(x,df_abundances[,1]),])))})))
list_pas_doublons <- unique(names(which(table(df_abundances[ ,1]) == 1)))
data <- rbind(abundances[match(list_pas_doublons,df_abundances[,1]),],fusion_doublons)
rownames(data)<-c(list_pas_doublons,list_doublons)
colnames(data) <- id_abundances
data <- data[,-grep("29",id_abundances)]
dim(data)
colnames(data) <- paste0("sample",colnames(data))
df_pathogenes<-read.delim("../data/pathogenes.csv",sep = ",")
pathogenes<-df_pathogenes[,-c(1,9)]
pathogenes<-as.data.frame(ifelse(pathogenes=='p',1,0))
pathogenes<-as.data.frame(apply(t(pathogenes),1,as.factor))
id_pathogenes<-df_pathogenes[,1]
id_pathogenes <- gsub("-","0",id_pathogenes)
id_pathogenes <- gsub(" ","",id_pathogenes)
id_pathogenes <- sapply(as.character(id_pathogenes),FUN=function(x){substr(x,nchar(x)-1,nchar(x))})
id_pathogenes <- id_pathogenes[-grep("29",id_pathogenes)]
id_pathogenes <- paste0(id_pathogenes,"_",rev(condition[-grep("29",id_abundances)]))
#
# matcher les noms des veaux
id_abundances_bis <- paste0(id_abundances[-grep("29",id_abundances)],"_",condition[-grep("29",id_abundances)])
Y<-pathogenes[match(id_abundances_bis,id_pathogenes),]
rownames(Y)<-id_abundances_bis
fit <- randomForest(Y$Ct.RSV ~ ., data = data)
summary(data)
summary(t(data))
summary(data[,1])
str(data)
fit <- randomForest(y=Y$Ct.RSV ~ ., data = data)
fit <- randomForest(y=Y$Ct.RSV,Y$Ct.RSV ~ ., data = data)
fit <- randomForest(Y$Ct.RSV ~ ., data = data)
fit <- randomForest(Y$Ct.RSV ~ ., data = t(data))
test <- as.data.frame(t(data))
fit <- randomForest(Y$Ct.RSV ~ ., data = test)
View(test)
test$&
colnames(test)[1] <- "petou"
test$petou
fit <- randomForest(Y$Ct.RSV ~ ., data = test)
str(test)
View(data)
class(test)
class(test$petou)
class(abundances$NG.10214_EN10A_lib136338_4869_1)
class(test$petou[1])
class(abundances$NG.10214_EN10A_lib136338_4869_1[1])
test <- sapply(test,as.integer)
class(test$petou)
test <- as.data.framesapply(test,as.integer))
test <- as.data.frame(t(data))
test <- as.data.frame(t(data))
test <- as.data.frames(apply(test,as.integer))
test <- as.data.frame(sapply(test,as.integer))
class(test$petou)
View(test)
View(test$&)
View(test$`&`)
class(test$`&`)
fit <- randomForest(Y$Ct.RSV ~ ., data = test)
summary(Y)
str(Y)
fit <- randomForest(Y$Ct.RSV ~ ., data = test)
colnames(test)<-paste0("var_",1:ncol(test))
fit <- randomForest(Y$Ct.RSV ~ ., data = test)
print(fit)
View(Y)
fit <- randomForest(Y$Ct.Coronavirus ~ ., data = test)
print(fit)
varImpPlot(fit)
fit$importance
fit$importance[1:15]
fit$importance[,1:15]
fit$importance[1:15,]
fit$importance[order(fit$importance[, 1], decreasing = TRUE), ]
(fit$importance[order(fit$importance[, 1], decreasing = TRUE), ])[1:15,]
(fit$importance[order(fit$importance[, 1], decreasing = TRUE), ])[1:15]
(fit$importance[order(fit$importance[, 1], decreasing = TRUE), ])[1:10]
plot(fit$err.rate[, 1], type = "l", xlab = "nombre d'arbres", ylab = "erreur OOB")
fit <- randomForest(Y$Ct.Coronavirus ~ ., data = test,ntree=1000)
print(fit)
plot(fit$err.rate[, 1], type = "l", xlab = "nombre d'arbres", ylab = "erreur OOB")
fit <- randomForest(Y$Ct.Coronavirus ~ ., data = test,ntree=5000)
print(fit)
print(fit$confusion)
plot(fit$err.rate[, 1], type = "l", xlab = "nombre d'arbres", ylab = "erreur OOB")
fit <- randomForest(Y$Ct.Coronavirus ~ ., data = test,ntree=5000,mtry=4)
print(fit$confusion)
fit <- randomForest(Y$Ct.Coronavirus ~ ., data = test,ntree=5000,mtry=20)
print(fit$confusion)
fit <- randomForest(Y$Ct.Coronavirus ~ ., data = test,ntree=2000,mtry=20)
print(fit$confusion)
fit <- randomForest(Y$Ct.Coronavirus ~ ., data = test,ntree=1000,mtry=25)
print(fit$confusion)
fit <- randomForest(Y$Ct.Coronavirus ~ ., data = test,ntree=500,mtry=25)
print(fit$confusion)
fit <- randomForest(Y$Ct.Coronavirus ~ ., data = test,ntree=1000,mtry=25)
print(fit$confusion)
fit <- randomForest(Y$Ct.Coronavirus ~ ., data = test,ntree=1000,mtry=25)
print(fit$confusion)
fit <- randomForest(Y$Ct.Coronavirus ~ ., data = test,ntree=1000,mtry=30)
print(fit$confusion)
plot(fit$err.rate[, 1], type = "l", xlab = "nombre d'arbres", ylab = "erreur OOB")
